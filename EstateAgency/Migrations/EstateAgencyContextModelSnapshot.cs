// <auto-generated />
using EstateAgency.Data;
using EstateAgency.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace EstateAgency.Migrations
{
    [DbContext(typeof(EstateAgencyContext))]
    partial class EstateAgencyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EstateAgency.Models.Application", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("EstateArea");

                    b.Property<string>("EstateType")
                        .IsRequired();

                    b.Property<string>("OtherRequirements");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("ID");

                    b.ToTable("Application");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Application");
                });

            modelBuilder.Entity("EstateAgency.Models.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress")
                        .IsRequired();

                    b.Property<int>("ClientStatus");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Client");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Client");
                });

            modelBuilder.Entity("EstateAgency.Models.Client_Treaty", b =>
                {
                    b.Property<int>("ClientID");

                    b.Property<int>("TreatyID");

                    b.HasKey("ClientID", "TreatyID");

                    b.HasIndex("TreatyID");

                    b.ToTable("Client_Treaty");
                });

            modelBuilder.Entity("EstateAgency.Models.Estate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress")
                        .IsRequired();

                    b.Property<double>("Area");

                    b.Property<int>("ClientID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImageThumbURL");

                    b.Property<string>("ImageURL");

                    b.Property<string>("InventoryNumber")
                        .IsRequired();

                    b.Property<string>("LongDescription")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("SaleStatus");

                    b.Property<int?>("SaleTreatyID1");

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Wall")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("SaleTreatyID1");

                    b.ToTable("Estate");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Estate");
                });

            modelBuilder.Entity("EstateAgency.Models.RentEstate_Lease", b =>
                {
                    b.Property<int>("EstateID");

                    b.Property<int>("LeaseID");

                    b.Property<int?>("RentEstateID");

                    b.HasKey("EstateID", "LeaseID");

                    b.HasIndex("LeaseID");

                    b.HasIndex("RentEstateID");

                    b.ToTable("RentEstate_Lease");
                });

            modelBuilder.Entity("EstateAgency.Models.Treaty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Number");

                    b.Property<DateTime>("SignDate");

                    b.HasKey("ID");

                    b.ToTable("Treaty");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Treaty");
                });

            modelBuilder.Entity("EstateAgency.Models.RentApplication", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Application");

                    b.Property<decimal>("RentPrice");

                    b.ToTable("RentApplication");

                    b.HasDiscriminator().HasValue("RentApplication");
                });

            modelBuilder.Entity("EstateAgency.Models.SaleApplication", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Application");

                    b.Property<decimal>("SalePrice");

                    b.ToTable("SaleApplication");

                    b.HasDiscriminator().HasValue("SaleApplication");
                });

            modelBuilder.Entity("EstateAgency.Models.Firm", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Client");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50);

                    b.Property<int>("UNP");

                    b.ToTable("Firm");

                    b.HasDiscriminator().HasValue("Firm");
                });

            modelBuilder.Entity("EstateAgency.Models.Person", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Client");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.ToTable("Person");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("EstateAgency.Models.RentEstate", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Estate");

                    b.Property<decimal>("PerSquareMeterRentPrice");

                    b.ToTable("RentEstate");

                    b.HasDiscriminator().HasValue("RentEstate");
                });

            modelBuilder.Entity("EstateAgency.Models.SaleEstate", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Estate");

                    b.Property<decimal>("SalePrice");

                    b.Property<int?>("SaleTreatyID");

                    b.HasIndex("SaleTreatyID");

                    b.ToTable("SaleEstate");

                    b.HasDiscriminator().HasValue("SaleEstate");
                });

            modelBuilder.Entity("EstateAgency.Models.Lease", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Treaty");

                    b.Property<double>("Area");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("TotalRentPrice");

                    b.ToTable("Lease");

                    b.HasDiscriminator().HasValue("Lease");
                });

            modelBuilder.Entity("EstateAgency.Models.SaleTreaty", b =>
                {
                    b.HasBaseType("EstateAgency.Models.Treaty");

                    b.Property<decimal>("TotalSalePrice");

                    b.ToTable("SaleTreaty");

                    b.HasDiscriminator().HasValue("SaleTreaty");
                });

            modelBuilder.Entity("EstateAgency.Models.Client_Treaty", b =>
                {
                    b.HasOne("EstateAgency.Models.Client", "Client")
                        .WithMany("Client_Treaties")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateAgency.Models.Treaty", "Treaty")
                        .WithMany("Client_Treaties")
                        .HasForeignKey("TreatyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EstateAgency.Models.Estate", b =>
                {
                    b.HasOne("EstateAgency.Models.Client", "Owner")
                        .WithMany("Estates")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateAgency.Models.SaleTreaty")
                        .WithMany("Estates")
                        .HasForeignKey("SaleTreatyID1");
                });

            modelBuilder.Entity("EstateAgency.Models.RentEstate_Lease", b =>
                {
                    b.HasOne("EstateAgency.Models.Estate", "Estate")
                        .WithMany()
                        .HasForeignKey("EstateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateAgency.Models.Lease", "Lease")
                        .WithMany("RentEstate_Leases")
                        .HasForeignKey("LeaseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EstateAgency.Models.RentEstate")
                        .WithMany("RentEstate_Leases")
                        .HasForeignKey("RentEstateID");
                });

            modelBuilder.Entity("EstateAgency.Models.SaleEstate", b =>
                {
                    b.HasOne("EstateAgency.Models.SaleTreaty", "SaleTreaty")
                        .WithMany()
                        .HasForeignKey("SaleTreatyID");
                });
#pragma warning restore 612, 618
        }
    }
}
